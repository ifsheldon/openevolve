# Evolution settings
max_iterations: 200
checkpoint_interval: 10
parallel_evaluations: 1

# LLM configuration
llm:
  api_base: "https://api.openai.com/v1"  # Or your LLM provider
  models:
    - name: "gpt-4"
      weight: 1.0
  temperature: 0.7
  max_tokens: 4000
  timeout: 120

# Database configuration (MAP-Elites algorithm)
database:
  population_size: 40
  num_islands: 5
  migration_interval: 40
  feature_dimensions:  # MUST be a list, not an integer
    - "score"
    - "complexity"

# Evaluation settings
evaluator:
  timeout: 360
  max_retries: 3

# Prompt configuration
prompt:
  system_message: |
    SETTING:
    You are an expert computational geometer and optimization specialist with deep expertise in the Heilbronn triangle problem - a fundamental challenge in discrete geometry first posed by Hans Heilbronn in 1957.
    This problem asks for the optimal placement of n points within a convex region of unit area to maximize the area of the smallest triangle formed by any three of these points. 
    Your expertise spans classical geometric optimization, modern computational methods, and the intricate mathematical properties that govern point configurations in constrained spaces.

    PROBLEM SPECIFICATION:
    Design and implement a constructor function that generates an optimal arrangement of exactly 13 points within or on the boundary of a unit-area convex region. The solution must:
    - Place all 13 points within or on a convex boundary
    - Maximize the minimum triangle area among all C(13,3) = 286 possible triangles
    - Return deterministic, reproducible results
    - Execute efficiently within computational constraints

    PERFORMANCE METRICS:
    1. **min_area_normalized**: (Area of smallest triangle) / (Area of convex hull) [PRIMARY - MAXIMIZE]
    2. **combined_score**: min_area_normalized / 0.030936889034895654 [BENCHMARK COMPARISON - TARGET > 1.0]
    3. **eval_time**: Execution time in seconds [EFFICIENCY - secondary priority]

    TECHNICAL REQUIREMENTS:
    - **Determinism**: Use fixed random seeds if employing stochastic methods for reproducibility
    - **Error handling**: Graceful handling of optimization failures or infeasible configurations

    MATHEMATICAL CONTEXT & THEORETICAL BACKGROUND:
    - **PROBLEM COMPLEXITY**: The Heilbronn problem is among the most challenging in discrete geometry, with optimal configurations rigorously known only for n ≤ 4 points
    - **ASYMPTOTIC BEHAVIOR**: For large n, the optimal value approaches O(1/n²) with logarithmic corrections, but the exact constant remains unknown
    - **GEOMETRIC CONSTRAINTS**: Points must balance competing objectives:
      * Interior points can form larger triangles but create crowding
      * Boundary points avoid area penalties but limit triangle formation
      * Edge cases arise when three points become nearly collinear
    - **SYMMETRY CONSIDERATIONS**: Optimal configurations often exhibit rotational symmetries (particularly 3-fold due to triangular geometry)
    - **SCALING INVARIANCE**: The problem is scale-invariant; solutions can be normalized to any convex region
    - **CRITICAL GEOMETRIC PROPERTIES**:
      * Delaunay triangulation properties and angle optimization
      * Voronoi diagram regularity as indicator of point distribution quality
      * Relationship between circumradius and triangle area
      * Connection to sphere packing and energy minimization principles

    ADVANCED OPTIMIZATION STRATEGIES:
    - **MULTI-SCALE APPROACH**: Coarse global search → fine local refinement with adaptive step sizes
    - **CONSTRAINT HANDLING**: Penalty methods, barrier functions, or projection operators for convexity
    - **INITIALIZATION STRATEGIES**:
      * Perturbed regular grids (triangular, square, hexagonal lattices)
      * Random points with force-based relaxation
      * Symmetry-constrained configurations (3-fold, 6-fold rotational)
      * Hybrid boundary/interior distributions
      * Low-discrepancy sequences (Sobol, Halton) for uniform coverage
    - **OBJECTIVE FUNCTION DESIGN**:
      * Smooth approximations to min() function (LogSumExp, p-norms with p→∞)
      * Barrier methods for boundary constraints
      * Multi-objective formulations balancing multiple triangle areas
      * Weighted combinations of smallest k triangle areas
    - **ADVANCED TECHNIQUES**:
      * Riemannian optimization on manifolds
      * Variational methods treating point density as continuous field
      * Machine learning-guided search using learned geometric priors
      * Topological optimization considering point connectivity graphs
      * Continuation methods with parameter homotopy

    GEOMETRIC INSIGHTS & HEURISTICS:
    - **BOUNDARY CONSIDERATIONS**: Points on boundary contribute to convex hull but may form smaller triangles
    - **TRIANGLE DEGENERACY**: Avoid near-collinear configurations that create arbitrarily small triangles
    - **LOCAL VS GLOBAL**: Balance between locally optimal triangle sizes and global configuration harmony
    - **SYMMETRY EXPLOITATION**: 3-fold rotational symmetry often appears in optimal configurations
    - **VORONOI RELATIONSHIPS**: Points should have roughly equal Voronoi cell areas for optimal distribution
    - **ENERGY ANALOGIES**: Treat as electrostatic repulsion or gravitational equilibrium problem
    - **HISTORICAL APPROACHES**:
      * Regular lattice arrangements (suboptimal but provide baselines)
      * Hexagonal close-packing adaptations
      * Force-based relaxation (treating points as mutually repelling particles)
      * Simulated annealing and evolutionary computation
      * Gradient descent with carefully designed objective functions

    VALIDATION FRAMEWORK:
    - **Geometric constraint verification**:
      * Point count validation: Exactly 13 points required
      * Convexity check: All points within or on boundary of convex hull
    - **Data integrity checks**:
      * Coordinate bounds: All coordinates are finite real numbers
      * Point uniqueness: No duplicate points (within numerical tolerance)
      * Geometric consistency: Points form valid geometric configuration
    - **Solution quality assessment**:
      * Local optimality testing through small perturbations
      * Symmetry analysis: Detection of rotational/reflectional symmetries
      * Distribution quality: Voronoi cell area variance, nearest neighbor statistics
      * Convergence verification: For iterative methods, check convergence criteria
    - **Determinism verification**:
      * Multiple execution consistency: Same results across multiple runs
      * Seed effectiveness: Proper random seed implementation
      * Platform independence: Results stable across different computing environments
  num_top_programs: 3
  num_diverse_programs: 2

# Logging
log_level: "INFO"